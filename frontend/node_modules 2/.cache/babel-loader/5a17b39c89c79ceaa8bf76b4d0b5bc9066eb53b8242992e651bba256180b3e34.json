{"ast":null,"code":"//описаны запросы к серверу\nclass Api {\n  constructor(options) {\n    this._url = options.url;\n    this._headers = options.headers;\n  }\n  _handleResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // Получение карточки\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n\n  // создание карточек\n  createInitialCards(name, link) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(this._handleResponse);\n  }\n\n  // удаление карточки\n  deleteCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n\n  // получение данных о пользователе с сервера\n  getInfoUser() {\n    return fetch(`${this._url}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n\n  // редактирование данных пользователя \n  editInfoUser(name, about) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(this._handleResponse);\n  }\n\n  // изменение аватара\n  editAvatarUser(_ref) {\n    let {\n      url\n    } = _ref;\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: url\n      })\n    }).then(this._handleResponse);\n  }\n\n  // Поставить лайк\n  addLikeCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n\n  // Убрать лайк\n  deleteLikeCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n}\nconst api = new Api({\n  url: 'https://mesto.nomoreparties.co/v1/cohort-60',\n  headers: {\n    authorization: 'f1b678bd-8daa-4ddc-9a95-4730e9a93182',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_url","url","_headers","headers","_handleResponse","res","ok","json","Promise","reject","status","getInitialCards","fetch","then","createInitialCards","name","link","method","body","JSON","stringify","deleteCard","cardId","getInfoUser","editInfoUser","about","editAvatarUser","_ref","avatar","addLikeCard","deleteLikeCard","api","authorization"],"sources":["/Users/anastasiasukhorukova/Desktop/mesto-react/mesto-react/src/utils/Api.js"],"sourcesContent":["//описаны запросы к серверу\nclass Api {\n  constructor(options) {\n    this._url = options.url;\n    this._headers = options.headers;\n  }\n\n  _handleResponse(res) {\n    if(res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`Ошибка: ${res.status}`)\n  }\n\n  // Получение карточки\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {headers: this._headers}) \n    .then(this._handleResponse);\n  }\n\n  // создание карточек\n  createInitialCards(name, link) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers, \n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    })  \n    .then(this._handleResponse);\n  }\n\n  // удаление карточки\n  deleteCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    })  \n    .then(this._handleResponse);\n  }\n\n  // получение данных о пользователе с сервера\n  getInfoUser() {\n    return fetch(`${this._url}/users/me`, {\n      method: 'GET',\n      headers: this._headers, \n    })  \n    .then(this._handleResponse);\n  }\n\n  // редактирование данных пользователя \n  editInfoUser(name, about) {\n     return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers, \n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    })  \n    .then(this._handleResponse);\n  }\n\n  // изменение аватара\n  editAvatarUser({url}) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers, \n      body: JSON.stringify({\n        avatar: url\n      })\n    })  \n    .then(this._handleResponse);\n  }\n\n  // Поставить лайк\n  addLikeCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this._headers, \n    })  \n    .then(this._handleResponse);\n  }\n\n  // Убрать лайк\n  deleteLikeCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this._headers, \n    })  \n    .then(this._handleResponse);\n  }\n}\n\nconst api = new Api({\n  url: 'https://mesto.nomoreparties.co/v1/cohort-60',\n  headers: {\n    authorization: 'f1b678bd-8daa-4ddc-9a95-4730e9a93182',\n    'Content-Type': 'application/json'\n  }\n});\n\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}