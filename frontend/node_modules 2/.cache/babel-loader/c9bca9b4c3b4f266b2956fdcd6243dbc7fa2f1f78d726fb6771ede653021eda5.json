{"ast":null,"code":"class Auth {\n  constructor(options) {\n    this._url = options.url;\n    this._headers = options.headers;\n  }\n  _handleResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  registerUser(email, password) {\n    return fetch(`${this._url}/signup`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(response => {\n      try {\n        if (response.status === 200) {\n          return response.json();\n        }\n      } catch (e) {\n        return e;\n      }\n    }).then(res => {\n      return res;\n    }).then(this._handleResponse);\n  }\n  loginUser(email, password) {\n    return fetch(`${this._url}/signin`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(response => response.json()).then(data => {\n      if (data.token) {\n        localStorage.setItem('jwt', data.token);\n        return data;\n      }\n    }).then(this._handleResponse);\n  }\n  getToken(jwt) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'GET',\n      headers: {\n        headers: this._headers,\n        Authorization: `Bearer ${jwt}`\n      }\n    }).then(response => {\n      try {\n        if (response.status === 200) {\n          return response.json();\n        }\n      } catch (e) {\n        return e;\n      }\n    }).then(res => {\n      return res;\n    }).catch(err => console.log(err));\n  }\n}\nconst useAuth = new Auth({\n  url: 'https://auth.nomoreparties.co',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': \"application/json\"\n  }\n});\nexport default useAuth;","map":{"version":3,"names":["Auth","constructor","options","_url","url","_headers","headers","_handleResponse","res","ok","json","Promise","reject","status","registerUser","email","password","fetch","method","body","JSON","stringify","then","response","e","loginUser","data","token","localStorage","setItem","getToken","jwt","Authorization","catch","err","console","log","useAuth"],"sources":["/Users/anastasiasukhorukova/Desktop/mesto-react-auth/react-mesto-auth/src/utils/auth.js"],"sourcesContent":["class Auth {\n  constructor(options) {\n    this._url = options.url;\n    this._headers = options.headers;\n  }\n\n  _handleResponse(res) {\n    if(res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`Ошибка: ${res.status}`)\n  }\n\n  registerUser (email, password) {\n    return fetch(`${this._url}/signup`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        email,\n        password\n      })\n    })\n    .then((response) => {\n      try {\n        if (response.status === 200){\n          return response.json();\n        }\n      } catch(e){\n        return (e)\n      }\n    })\n    .then((res) => {\n      return res;\n    })\n    .then(this._handleResponse);\n  }; \n\n  loginUser (email, password) {\n    return fetch(`${this._url}/signin`,{\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({email, password}),\n    })\n    .then((response => response.json()))\n  .then((data) => {\n    if (data.token){\n      localStorage.setItem('jwt', data.token);\n      return data;\n    }\n  })\n  .then(this._handleResponse);\n}; \n\n  getToken (jwt) {\n    return fetch(`${this._url}/users/me`,{\n      method: 'GET',\n      headers: {\n        headers: this._headers,\n        Authorization: `Bearer ${jwt}`,\n      },\n    })\n    .then((response) => {\n      try {\n        if (response.status === 200){\n          return response.json();\n        }\n      } catch(e){\n        return (e)\n      }\n    })\n    .then((res) => {\n      return res;\n    })\n    .catch((err) => console.log(err));\n  }\n}\n\nconst useAuth = new Auth({\n  url: 'https://auth.nomoreparties.co',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': \"application/json\"\n  }\n})\n\nexport default useAuth;"],"mappings":"AAAA,MAAMA,IAAI,CAAC;EACTC,WAAWA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACC,IAAI,GAAGD,OAAO,CAACE,GAAG;IACvB,IAAI,CAACC,QAAQ,GAAGH,OAAO,CAACI,OAAO;EACjC;EAEAC,eAAeA,CAACC,GAAG,EAAE;IACnB,IAAGA,GAAG,CAACC,EAAE,EAAE;MACX,OAAOD,GAAG,CAACE,IAAI,EAAE;IACnB;IACA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAC9C;EAEAC,YAAYA,CAAEC,KAAK,EAAEC,QAAQ,EAAE;IAC7B,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACd,IAAK,SAAQ,EAAE;MAClCe,MAAM,EAAE,MAAM;MACdZ,OAAO,EAAE,IAAI,CAACD,QAAQ;MACtBc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBN,KAAK;QACLC;MACF,CAAC;IACH,CAAC,CAAC,CACDM,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI;QACF,IAAIA,QAAQ,CAACV,MAAM,KAAK,GAAG,EAAC;UAC1B,OAAOU,QAAQ,CAACb,IAAI,EAAE;QACxB;MACF,CAAC,CAAC,OAAMc,CAAC,EAAC;QACR,OAAQA,CAAC;MACX;IACF,CAAC,CAAC,CACDF,IAAI,CAAEd,GAAG,IAAK;MACb,OAAOA,GAAG;IACZ,CAAC,CAAC,CACDc,IAAI,CAAC,IAAI,CAACf,eAAe,CAAC;EAC7B;EAEAkB,SAASA,CAAEV,KAAK,EAAEC,QAAQ,EAAE;IAC1B,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACd,IAAK,SAAQ,EAAC;MACjCe,MAAM,EAAE,MAAM;MACdZ,OAAO,EAAE,IAAI,CAACD,QAAQ;MACtBc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACN,KAAK;QAAEC;MAAQ,CAAC;IACxC,CAAC,CAAC,CACDM,IAAI,CAAEC,QAAQ,IAAIA,QAAQ,CAACb,IAAI,EAAE,CAAE,CACrCY,IAAI,CAAEI,IAAI,IAAK;MACd,IAAIA,IAAI,CAACC,KAAK,EAAC;QACbC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEH,IAAI,CAACC,KAAK,CAAC;QACvC,OAAOD,IAAI;MACb;IACF,CAAC,CAAC,CACDJ,IAAI,CAAC,IAAI,CAACf,eAAe,CAAC;EAC7B;EAEEuB,QAAQA,CAAEC,GAAG,EAAE;IACb,OAAOd,KAAK,CAAE,GAAE,IAAI,CAACd,IAAK,WAAU,EAAC;MACnCe,MAAM,EAAE,KAAK;MACbZ,OAAO,EAAE;QACPA,OAAO,EAAE,IAAI,CAACD,QAAQ;QACtB2B,aAAa,EAAG,UAASD,GAAI;MAC/B;IACF,CAAC,CAAC,CACDT,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI;QACF,IAAIA,QAAQ,CAACV,MAAM,KAAK,GAAG,EAAC;UAC1B,OAAOU,QAAQ,CAACb,IAAI,EAAE;QACxB;MACF,CAAC,CAAC,OAAMc,CAAC,EAAC;QACR,OAAQA,CAAC;MACX;IACF,CAAC,CAAC,CACDF,IAAI,CAAEd,GAAG,IAAK;MACb,OAAOA,GAAG;IACZ,CAAC,CAAC,CACDyB,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;EACnC;AACF;AAEA,MAAMG,OAAO,GAAG,IAAIrC,IAAI,CAAC;EACvBI,GAAG,EAAE,+BAA+B;EACpCE,OAAO,EAAE;IACP,QAAQ,EAAE,kBAAkB;IAC5B,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,eAAe+B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}